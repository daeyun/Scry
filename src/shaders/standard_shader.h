#pragma once
#include <string>
#include "shader_source.h"

static ShaderSource kStandardShader = {
"#version 330 core\n"
"layout(location = 0) in vec3 vertexPosition_modelspace;"
"layout(location = 1) in vec2 vertexUV;"
"layout(location = 2) in vec3 vertexNormal_modelspace;"
"out vec2 UV;"
"out vec3 Position_worldspace;"
"out vec3 Normal_cameraspace;"
"out vec3 EyeDirection_cameraspace;"
"out vec3 LightDirection_cameraspace;"
"uniform mat4 MVP;"
"uniform mat4 V;"
"uniform mat4 M;"
"uniform vec3 LightPosition_worldspace;"
"void main(){"
"	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);"
"	Position_worldspace = (M * vec4(vertexPosition_modelspace,1)).xyz;"
"	vec3 vertexPosition_cameraspace = ( V * M * vec4(vertexPosition_modelspace,1)).xyz;"
"	EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;"
"	vec3 LightPosition_cameraspace = ( V * vec4(LightPosition_worldspace,1)).xyz;"
"	LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;"
"	Normal_cameraspace = ( V * M * vec4(vertexNormal_modelspace,0)).xyz;"
"	UV = vertexUV;"
"}",
"#version 330 core\n"
"in vec2 UV;"
"in vec3 Position_worldspace;"
"in vec3 Normal_cameraspace;"
"in vec3 EyeDirection_cameraspace;"
"in vec3 LightDirection_cameraspace;"
"out vec3 color;"
"uniform sampler2D myTextureSampler;"
"uniform mat4 MV;"
"uniform vec3 LightPosition_worldspace;"
"void main(){"
"	vec3 LightColor = vec3(1,1,1);"
"	float LightPower = 50.0f;"
"	vec3 MaterialDiffuseColor = texture( myTextureSampler, UV ).rgb;"
"	vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;"
"	vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);"
"	float distance = length( LightPosition_worldspace - Position_worldspace );"
"	vec3 n = normalize( Normal_cameraspace );"
"	vec3 l = normalize( LightDirection_cameraspace );"
"	float cosTheta = clamp( dot( n,l ), 0,1 );"
"	vec3 E = normalize(EyeDirection_cameraspace);"
"	vec3 R = reflect(-l,n);"
"	float cosAlpha = clamp( dot( E,R ), 0,1 );"
"	color ="
"		MaterialAmbientColor +"
"		MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance) +"
"		MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance);"
"}"
};
